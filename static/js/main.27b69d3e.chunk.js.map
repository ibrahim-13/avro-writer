{"version":3,"sources":["Header.tsx","InfoKeyBinding.tsx","localstorage.ts","suggestion.tsx","avroLib/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["GithubLink","props","className","width","height","src","alt","href","link","target","rel","label","Header","React","useState","show","setShow","onClick","InfoKeyBinding","LocalStorageAccess","window","localStorage","getItem","selection","removeItem","setItem","Suggestion","suggestions","words","length","map","s","i","key","style","cursor","prevSelection","onSelect","workerUrl","process","worker","Worker","avroWroker","wrap","App","ref","useRef","LangSelection","lang","setLang","setSuggestions","onLangChange","useCallback","ev","newLang","id","undefined","onSuggestSelect","word","current","parts","value","split","join","useEffect","onKeyUp","ctrlKey","addEventListener","removeEventListener","arrowKeyListener","persist","evKey","toLowerCase","preventDefault","stopPropagation","currentSelection","a","inputText","endsWith","last","AvroWorker","getSuggestion","type","name","onChange","checked","htmlFor","defaultValue","onKeyDown","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27b69d3e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype GithubLinkProps = {\r\n  link: string;\r\n  label: string;\r\n}\r\n\r\nfunction GithubLink(props: GithubLinkProps): JSX.Element {\r\n  return (\r\n    <div className=\"github-link\">\r\n      <img width=\"30px\" height=\"30px\" src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\" alt=\"github-logo\" />\r\n      <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.label}</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function Header(): JSX.Element {\r\n  const [show, setShow] = React.useState<boolean>(true);\r\n\r\n  if (!show) return <button className=\"header-btn\" onClick={(): void => setShow(true)}><b>Avro Writer</b></button>;\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h2 className=\"header-label\">\r\n        Avro Writer\r\n        <span className=\"header-comment\">Avro in PWA</span>\r\n        <span className=\"header-cross-btn\"><button onClick={(): void => setShow(false)}><b>X</b></button></span>\r\n      </h2>\r\n      <div className=\"header-links\">\r\n        <GithubLink label=\"Avro-Pad\" link=\"https://github.com/omicronlab/avro-pad/\" />\r\n        <GithubLink label=\"Avro Writer\" link=\"https://github.com/ibrahim-13/avro-writer\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nexport function InfoKeyBinding(): JSX.Element {\r\n  return (\r\n    <div className=\"info-keybinding\">\r\n      (CTRL + . to Toggle Language, arrow keys to traverse suggestions)\r\n    </div>\r\n  );\r\n}","const KeyLangSelection = 'avrowriter/lang';\r\n\r\nexport const LocalStorageAccess = {\r\n  get LangSelection(): string | null {\r\n    return window.localStorage.getItem(KeyLangSelection);\r\n  },\r\n  set LangSelection(selection: string | null) {\r\n    (selection === null ? window.localStorage.removeItem(KeyLangSelection)\r\n      : window.localStorage.setItem(KeyLangSelection, selection));\r\n  },\r\n}","import React from 'react';\r\nimport { TAvroSuggestion } from './avroLib';\r\n\r\ntype Props = {\r\n  suggestions?: TAvroSuggestion;\r\n  onSelect?: (word: string) => void;\r\n}\r\n\r\nexport function Suggestion(props: Props): JSX.Element {\r\n  return (\r\n    <div className=\"suggestion\">\r\n      {props.suggestions && props.suggestions.words.length > 0 ? (\r\n        props.suggestions.words.map((s, i) => (\r\n          <div\r\n            key={s}\r\n            style={{ cursor: 'pointer' }}\r\n            className={`suggest${props.suggestions?.prevSelection === i ? ' selected' : ''}`}\r\n            onClick={(): void => props.onSelect?.(s)}\r\n          >\r\n            {s}\r\n          </div>\r\n        ))\r\n      ) : (\r\n          <div className=\"suggest\">No suggestion</div>\r\n        )}\r\n    </div>\r\n  );\r\n}","import { wrap } from 'comlink';\r\n\r\nexport type TAvroSuggestion = {\r\n  prevSelection: number,\r\n  words: string[],\r\n}\r\n\r\ntype TAvroPhonetic = {\r\n  getVersion: () => string;\r\n  getSuggestion: (queryText: string) => TAvroSuggestion;\r\n  setCommit: (queryText: string, bnValue: string) => void;\r\n}\r\n\r\nconst workerUrl = `${process.env.PUBLIC_URL ? process.env.PUBLIC_URL : ''}/avro.worker.js`; \r\n\r\nconst worker = new Worker(workerUrl);\r\nconst avroWroker = wrap<TAvroPhonetic>(worker);\r\n\r\nexport default avroWroker;","import React from 'react';\nimport './App.css';\nimport { Header } from './Header';\nimport { InfoKeyBinding } from './InfoKeyBinding';\nimport { LocalStorageAccess } from './localstorage';\nimport { Suggestion } from './suggestion';\nimport AvroWorker, { TAvroSuggestion } from './avroLib';\n\nfunction App(): JSX.Element {\n  const ref = React.useRef<HTMLTextAreaElement>(null);\n  const [lang, setLang] = React.useState<string | null>(LocalStorageAccess.LangSelection || 'bn');\n  const [suggestions, setSuggestions] = React.useState<TAvroSuggestion>();\n  const onLangChange = React.useCallback((ev: React.ChangeEvent<HTMLInputElement>): void => {\n    const newLang = ev.target.id === 'lang_en' ? 'en' : 'bn';\n    LocalStorageAccess.LangSelection = newLang;\n    setLang(newLang);\n    setSuggestions(undefined);\n  }, []);\n\n  const onSuggestSelect = React.useCallback((word: string) => {\n    if (ref.current) {\n      const parts = ref.current.value.split(' ');\n      parts[parts.length - 1] = word;\n      ref.current.value = parts.join(' ') + ' ';\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const onKeyUp = (ev: KeyboardEvent): void => {\n      if (ev.key === '.' && ev.ctrlKey) {\n        const currentLang = LocalStorageAccess.LangSelection;\n        const newLang = currentLang === 'en' ? 'bn' : 'en';\n        LocalStorageAccess.LangSelection = newLang;\n        setLang(newLang);\n      }\n    }\n    window.addEventListener(\"keyup\", onKeyUp);\n    return (): void => {\n      window.removeEventListener('keyup', onKeyUp);\n    };\n  }, []);\n\n  const arrowKeyListener = React.useCallback((ev: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    ev.persist();\n    const evKey = ev.key.toLowerCase();\n    if (evKey === 'arrowright') {\n      setSuggestions(s => {\n        if (s) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          let currentSelection = s.prevSelection + 1;\n          currentSelection = currentSelection === s.words.length ? 0 : currentSelection;\n          return { ...s, prevSelection: currentSelection };\n        }\n        return s;\n      });\n    } else if (evKey === 'arrowleft') {\n      setSuggestions(s => {\n        if (s) {\n          ev.preventDefault();\n          ev.stopPropagation();\n          let currentSelection = s.prevSelection - 1;\n          currentSelection = currentSelection === -1 ? (s.words.length - 1) : currentSelection;\n          return { ...s, prevSelection: currentSelection };\n        }\n        return s;\n      });\n    }\n  }, []);\n\n  async function textChange({ target: { value: inputText } }: React.ChangeEvent<HTMLTextAreaElement>): Promise<void> {\n    if (lang !== 'bn') return;\n    if (inputText.endsWith('\\n') && suggestions) {\n      onSuggestSelect(suggestions.words[suggestions.prevSelection]);\n      setSuggestions(undefined);\n      return;\n    }\n    const parts = inputText.split(' ');\n    const last = parts[parts.length - 1];\n    setSuggestions(await AvroWorker.getSuggestion(last));\n  }\n\n  return (\n    <div className=\"writer\">\n      <Header />\n      <form className=\"lang-form\">\n        <input type=\"radio\" id=\"lang_en\" name=\"lang\" value=\"en\" onChange={onLangChange} checked={lang === 'en'} />\n        <label htmlFor=\"lang_en\">English</label>\n        <input type=\"radio\" id=\"lang_bn\" name=\"lang\" value=\"bn\" onChange={onLangChange} checked={lang === 'bn'} />\n        <label htmlFor=\"lang_bn\">বাংলা</label>\n      </form>\n      <InfoKeyBinding />\n      <Suggestion suggestions={suggestions} onSelect={onSuggestSelect} />\n      <textarea\n        ref={ref}\n        className=\"text-area\"\n        wrap=\"hard\"\n        defaultValue=\"\"\n        onKeyDown={arrowKeyListener}\n        onChange={textChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}